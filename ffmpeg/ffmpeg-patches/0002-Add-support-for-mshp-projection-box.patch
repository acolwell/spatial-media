From 248a3912c4977c9fa6f23d8d1201a25bb399d1ee Mon Sep 17 00:00:00 2001
From: Aaron Colwell <300262+acolwell@users.noreply.github.com>
Date: Sat, 18 Jul 2020 00:44:29 -0700
Subject: [PATCH 2/6] Add support for mshp projection box.

---
 fftools/ffmpeg_opt.c  | 50 +++++++++++++++++++++++++++++++++++++++++--
 libavformat/dump.c    |  2 ++
 libavformat/mov.c     | 34 +++++++++++++++++++++++++++--
 libavformat/movenc.c  |  9 +++++++-
 libavutil/spherical.c |  1 +
 libavutil/spherical.h | 21 ++++++++++++++++++
 6 files changed, 112 insertions(+), 5 deletions(-)

diff --git a/fftools/ffmpeg_opt.c b/fftools/ffmpeg_opt.c
index 70f2071473..13fe10642d 100644
--- a/fftools/ffmpeg_opt.c
+++ b/fftools/ffmpeg_opt.c
@@ -1685,6 +1685,8 @@ static int set_spherical_mapping(const char* opt, OutputStream *ost) {
         int64_t padding;
 
         int stereo_mode;
+
+        const char* mesh_filename;
     } SphericalMappingContext;
 
 #define OFFSET(x) offsetof(SphericalMappingContext, x)
@@ -1692,13 +1694,15 @@ static int set_spherical_mapping(const char* opt, OutputStream *ost) {
 
     static const AVOption opts[] = {
         { "projection", "projection", OFFSET(projection), AV_OPT_TYPE_INT,
-            { .i64 = -1 }, -1, AV_SPHERICAL_EQUIRECTANGULAR_TILE, FLAGS, "projection" },
+            { .i64 = -1 }, -1, AV_SPHERICAL_MESH, FLAGS, "projection" },
         { "equirectangular", "equirectangular projection", 0, AV_OPT_TYPE_CONST,
             { .i64 = AV_SPHERICAL_EQUIRECTANGULAR }, INT_MIN, INT_MAX, FLAGS, "projection" },
         { "cubemap", "cubemap projection", 0, AV_OPT_TYPE_CONST,
             { .i64 = AV_SPHERICAL_CUBEMAP }, INT_MIN, INT_MAX, FLAGS, "projection" },
         { "equirectangular_tile", "tiled equirectangular projection", 0, AV_OPT_TYPE_CONST,
             { .i64 = AV_SPHERICAL_EQUIRECTANGULAR_TILE }, INT_MIN, INT_MAX, FLAGS, "projection" },
+        { "mesh", "mesh projection", 0, AV_OPT_TYPE_CONST,
+            { .i64 = AV_SPHERICAL_MESH }, INT_MIN, INT_MAX, FLAGS, "projection" },
         { "yaw", "initial yaw orientation in degrees", OFFSET(yaw), AV_OPT_TYPE_DOUBLE,
             { .dbl = 0.0 }, -180.0, 180.0, FLAGS },
         { "pitch", "initial pitch orientation in degrees", OFFSET(pitch), AV_OPT_TYPE_DOUBLE,
@@ -1721,6 +1725,8 @@ static int set_spherical_mapping(const char* opt, OutputStream *ost) {
             { .i64 = AV_STEREO3D_TOPBOTTOM }, INT_MIN, INT_MAX, FLAGS, "stereo_mode" },
         { "left-right", "Left/Right stereo mode", 0, AV_OPT_TYPE_CONST,
             { .i64 = AV_STEREO3D_SIDEBYSIDE }, INT_MIN, INT_MAX, FLAGS, "stereo_mode" },
+        { "mesh_filename", "mesh filename", OFFSET(mesh_filename), AV_OPT_TYPE_STRING,
+            { .str = NULL }, CHAR_MIN, CHAR_MAX, FLAGS },
         { NULL }
     };
 #undef OFFSET
@@ -1766,7 +1772,47 @@ static int set_spherical_mapping(const char* opt, OutputStream *ost) {
         return AVERROR(EINVAL);
     }
 
-    spherical_mapping = av_spherical_alloc(&spherical_mapping_size);
+    if (ctx.projection == AV_SPHERICAL_MESH) {
+        AVIOContext *mesh_file_ctx;
+        if (ctx.mesh_filename == NULL) {
+            av_log(NULL, AV_LOG_ERROR, "mesh_filename must be specified for AV_SPHERICAL_MESH projection.\n");
+            return AVERROR(EINVAL);
+        }
+
+        ret = avio_open(&mesh_file_ctx, ctx.mesh_filename, AVIO_FLAG_READ);
+        if (ret < 0) {
+            av_log(NULL, AV_LOG_ERROR, "Failed to open mesh file '%s'.\n", ctx.mesh_filename);
+            return ret;
+        }
+
+        int64_t mesh_size = avio_size(mesh_file_ctx);
+        if (mesh_size > 0) {
+            spherical_mapping_size = sizeof(AVSphericalMapping) + mesh_size;
+            spherical_mapping = av_mallocz(spherical_mapping_size);
+            if (spherical_mapping) {
+                spherical_mapping->mesh_size = mesh_size;
+                ret = avio_read(mesh_file_ctx,
+                                spherical_mapping->mesh_data,
+                                spherical_mapping->mesh_size);
+            } else {
+                ret = AVERROR(ENOMEM);
+            }
+        } else {
+            av_log(NULL, AV_LOG_ERROR, "Invalid mesh_size %d.\n", mesh_size);
+            ret = AVERROR(EINVAL);
+        }
+
+        avio_closep(&mesh_file_ctx);
+        if (ret < 0) {
+            if (spherical_mapping)
+                av_freep(&spherical_mapping);
+
+	    return ret;
+	}
+    } else {
+        spherical_mapping = av_spherical_alloc(&spherical_mapping_size);
+    }
+
     if (!spherical_mapping)
         return AVERROR(ENOMEM);
 
diff --git a/libavformat/dump.c b/libavformat/dump.c
index 06bafc272d..60ab5e54f2 100644
--- a/libavformat/dump.c
+++ b/libavformat/dump.c
@@ -385,6 +385,8 @@ static void dump_spherical(void *ctx, AVCodecParameters *par, AVPacketSideData *
                l, t, r, b);
     } else if (spherical->projection == AV_SPHERICAL_CUBEMAP) {
         av_log(ctx, AV_LOG_INFO, "[pad %"PRIu32"] ", spherical->padding);
+    } else if (spherical->projection == AV_SPHERICAL_MESH) {
+        av_log(ctx, AV_LOG_INFO, "[mesh size %"PRIu32"] ", spherical->mesh_size);
     }
 }
 
diff --git a/libavformat/mov.c b/libavformat/mov.c
index dfb41b93bf..8186350fe2 100644
--- a/libavformat/mov.c
+++ b/libavformat/mov.c
@@ -5550,7 +5550,7 @@ static int mov_read_sv3d(MOVContext *c, AVIOContext *pb, MOVAtom atom)
 {
     AVStream *st;
     MOVStreamContext *sc;
-    int size, version, layout;
+    int size, version, flags, layout;
     int32_t yaw, pitch, roll;
     uint32_t l = 0, t = 0, r = 0, b = 0;
     uint32_t tag, padding = 0;
@@ -5582,7 +5582,7 @@ static int mov_read_sv3d(MOVContext *c, AVIOContext *pb, MOVAtom atom)
                version);
         return 0;
     }
-    avio_skip(pb, 3); /* flags */
+    flags = avio_rb24(pb);
     avio_skip(pb, size - 12); /* metadata_source */
 
     size = avio_rb32(pb);
@@ -5658,6 +5658,9 @@ static int mov_read_sv3d(MOVContext *c, AVIOContext *pb, MOVAtom atom)
         else
             projection = AV_SPHERICAL_EQUIRECTANGULAR;
         break;
+    case MKTAG('m','s','h','p'):
+        projection = AV_SPHERICAL_MESH;
+        break;
     default:
         av_log(c->fc, AV_LOG_ERROR, "Unknown projection type: %s\n", av_fourcc2str(tag));
         return 0;
@@ -5680,6 +5683,33 @@ static int mov_read_sv3d(MOVContext *c, AVIOContext *pb, MOVAtom atom)
     sc->spherical->bound_right  = r;
     sc->spherical->bound_bottom = b;
 
+    if (projection == AV_SPHERICAL_MESH) {
+        const uint32_t kMaxMeshSize = 4 << 20;
+        int ret = 0;
+        const uint32_t mesh_size = size - 8;
+        if (size <= 8 || sc->spherical_size > kMaxMeshSize) {
+            av_log(c->fc, AV_LOG_ERROR,
+                   "Invalid size (%d <= 8) or invalid mesh size (%d > %d)\n",
+                   size, mesh_size, kMaxMeshSize);
+            return AVERROR_INVALIDDATA;
+        }
+        const int spherical_size = sizeof(AVSphericalMapping) + mesh_size;
+        AVSphericalMapping* spherical = av_mallocz(spherical_size);
+        if (!spherical)
+            return AVERROR(ENOMEM);
+        memcpy(spherical, sc->spherical, sc->spherical_size);
+        av_freep(&sc->spherical);
+        sc->spherical = spherical;
+        sc->spherical_size = spherical_size;
+
+        AV_WB8(sc->spherical->mesh_data, version);
+        AV_WB24(sc->spherical->mesh_data, flags);
+        ret = avio_read(pb, sc->spherical->mesh_data + 4, mesh_size - 4);
+        if (ret < 0)
+            return ret;
+        sc->spherical->mesh_size = mesh_size;
+    }
+
     return 0;
 }
 
diff --git a/libavformat/movenc.c b/libavformat/movenc.c
index 5d8dc4fd5d..d827baf8a5 100644
--- a/libavformat/movenc.c
+++ b/libavformat/movenc.c
@@ -1764,7 +1764,8 @@ static int mov_write_sv3d_tag(AVFormatContext *s, AVIOContext *pb, AVSphericalMa
 
     if (spherical_mapping->projection != AV_SPHERICAL_EQUIRECTANGULAR &&
         spherical_mapping->projection != AV_SPHERICAL_EQUIRECTANGULAR_TILE &&
-        spherical_mapping->projection != AV_SPHERICAL_CUBEMAP) {
+        spherical_mapping->projection != AV_SPHERICAL_CUBEMAP &&
+        spherical_mapping->projection != AV_SPHERICAL_MESH) {
         av_log(s, AV_LOG_WARNING, "Unsupported projection %d. sv3d not written.\n", spherical_mapping->projection);
         return 0;
     }
@@ -1809,6 +1810,12 @@ static int mov_write_sv3d_tag(AVFormatContext *s, AVIOContext *pb, AVSphericalMa
         avio_wb32(pb, 0); /* layout */
         avio_wb32(pb, spherical_mapping->padding); /* padding */
         break;
+      case AV_SPHERICAL_MESH:
+        avio_wb32(pb, 8 + spherical_mapping->mesh_size);    /* size */
+        ffio_wfourcc(pb, "mshp");
+        avio_write(pb, spherical_mapping->mesh_data,
+                   spherical_mapping->mesh_size);
+        break;
     }
     update_size(pb, proj_pos);
 
diff --git a/libavutil/spherical.c b/libavutil/spherical.c
index 4be55f36cf..4b34d1b25d 100644
--- a/libavutil/spherical.c
+++ b/libavutil/spherical.c
@@ -55,6 +55,7 @@ static const char *spherical_projection_names[] = {
     [AV_SPHERICAL_EQUIRECTANGULAR]      = "equirectangular",
     [AV_SPHERICAL_CUBEMAP]              = "cubemap",
     [AV_SPHERICAL_EQUIRECTANGULAR_TILE] = "tiled equirectangular",
+    [AV_SPHERICAL_MESH]                 = "mesh",
 };
 
 const char *av_spherical_projection_name(enum AVSphericalProjection projection)
diff --git a/libavutil/spherical.h b/libavutil/spherical.h
index cef759cf27..1dbc989128 100644
--- a/libavutil/spherical.h
+++ b/libavutil/spherical.h
@@ -70,6 +70,11 @@ enum AVSphericalProjection {
      * the position of the current video in a larger surface.
      */
     AV_SPHERICAL_EQUIRECTANGULAR_TILE,
+
+    /**
+     * Video represents a texture mapped to a projection mesh.
+     */
+    AV_SPHERICAL_MESH,
 };
 
 /**
@@ -180,6 +185,22 @@ typedef struct AVSphericalMapping {
      *       cases.
      */
     uint32_t padding;
+
+    /**
+     * @name Projection mesh
+     * @anchor projection_mesh
+     * @{
+     * These fields indicate the size and contents of the mshp projection box.
+     *
+     * @note This value is valid for only for the mesh projection type
+     *       (@ref AV_SPHERICAL_MESH), and should be ignored in all other
+     *       cases.
+     */
+    uint32_t mesh_size;
+    uint8_t mesh_data[];
+    /**
+     * @}
+     */
 } AVSphericalMapping;
 
 /**
-- 
2.25.1

